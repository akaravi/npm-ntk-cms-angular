{"version":3,"file":"translate.service.d.ts","sources":["translate.service.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, InjectionToken } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { MissingTranslationHandler } from \"./missing-translation-handler\";\nimport { TranslateCompiler } from \"./translate.compiler\";\nimport { TranslateLoader } from \"./translate.loader\";\nimport { TranslateParser } from \"./translate.parser\";\nimport { TranslateStore } from \"./translate.store\";\nexport declare const USE_STORE: InjectionToken<string>;\nexport declare const USE_DEFAULT_LANG: InjectionToken<string>;\nexport interface TranslationChangeEvent {\n    translations: any;\n    lang: string;\n}\nexport interface LangChangeEvent {\n    lang: string;\n    translations: any;\n}\nexport interface DefaultLangChangeEvent {\n    lang: string;\n    translations: any;\n}\nexport declare class TranslateService {\n    store: TranslateStore;\n    currentLoader: TranslateLoader;\n    compiler: TranslateCompiler;\n    parser: TranslateParser;\n    missingTranslationHandler: MissingTranslationHandler;\n    private useDefaultLang;\n    private isolate;\n    private loadingTranslations;\n    private pending;\n    private _onTranslationChange;\n    private _onLangChange;\n    private _onDefaultLangChange;\n    private _defaultLang;\n    private _currentLang;\n    private _langs;\n    private _translations;\n    private _translationRequests;\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n       *     // do something\n       * });\n     */\n    readonly onTranslationChange: EventEmitter<TranslationChangeEvent>;\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    readonly onLangChange: EventEmitter<LangChangeEvent>;\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    readonly onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    defaultLang: string;\n    /**\n     * The lang currently used\n     */\n    currentLang: string;\n    /**\n     * an array of langs\n     */\n    langs: string[];\n    /**\n     * a list of translations per lang\n     */\n    translations: any;\n    /**\n     *\n     * @param store an instance of the store (that is supposed to be unique)\n     * @param currentLoader An instance of the loader currently used\n     * @param compiler An instance of the compiler currently used\n     * @param parser An instance of the parser currently used\n     * @param missingTranslationHandler A handler for missing translations.\n     * @param isolate whether this service should use the store or not\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n     */\n    constructor(store: TranslateStore, currentLoader: TranslateLoader, compiler: TranslateCompiler, parser: TranslateParser, missingTranslationHandler: MissingTranslationHandler, useDefaultLang?: boolean, isolate?: boolean);\n    /**\n     * Sets the default language to use as a fallback\n     */\n    setDefaultLang(lang: string): void;\n    /**\n     * Gets the default language used\n     */\n    getDefaultLang(): string;\n    /**\n     * Changes the lang currently used\n     */\n    use(lang: string): Observable<any>;\n    /**\n     * Retrieves the given translations\n     */\n    private retrieveTranslations(lang);\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     */\n    getTranslation(lang: string): Observable<any>;\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     */\n    setTranslation(lang: string, translations: Object, shouldMerge?: boolean): void;\n    /**\n     * Returns an array of currently available langs\n     */\n    getLangs(): Array<string>;\n    /**\n     * Add available langs\n     */\n    addLangs(langs: Array<string>): void;\n    /**\n     * Update the list of available langs\n     */\n    private updateLangs();\n    /**\n     * Returns the parsed result of the translations\n     */\n    getParsedResult(translations: any, key: any, interpolateParams?: Object): any;\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @returns the translated key, or an object of translated keys\n     */\n    get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any>;\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @returns A stream of the translated key, or an object of translated keys\n     */\n    stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any>;\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     */\n    instant(key: string | Array<string>, interpolateParams?: Object): string | any;\n    /**\n     * Sets the translated value of a key, after compiling it\n     */\n    set(key: string, value: string, lang?: string): void;\n    /**\n     * Changes the current lang\n     */\n    private changeLang(lang);\n    /**\n     * Changes the default lang\n     */\n    private changeDefaultLang(lang);\n    /**\n     * Allows to reload the lang file from the file\n     */\n    reloadLang(lang: string): Observable<any>;\n    /**\n     * Deletes inner translation\n     */\n    resetLang(lang: string): void;\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     */\n    getBrowserLang(): string;\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     */\n    getBrowserCultureLang(): string;\n}\n"]}