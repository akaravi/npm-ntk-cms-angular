{"version":3,"sources":["ngx-smart-modal.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","ngxSmartModal","core","common","this","NgxSmartModalConfig","bodyClassOpen","prefixEvent","NgxSmartModalComponent","_renderer","_changeDetectorRef","componentFactoryResolver","_document","_platformId","closable","escapable","dismissable","identifier","customClass","visible","backdrop","force","hideDelay","autostart","target","ariaLabel","ariaLabelledBy","ariaDescribedBy","refocus","visibleChange","EventEmitter","onClose","onCloseFinished","onDismiss","onDismissFinished","onAnyCloseEvent","onAnyCloseEventFinished","onOpen","onOpenFinished","onEscape","onDataAdded","onDataRemoved","layerPosition","overlayVisible","openedClass","createFrom","prototype","ngOnInit","length","Error","_sendEvent","ngAfterViewInit","_this","contentComponent","factory_1","resolveComponentFactory","createDynamicContent","dynamicContentContainer","changes","subscribe","contentViewContainers","ngOnDestroy","open","top","close","dismiss","e","classList","contains","toggle","addCustomClass","className","removeCustomClass","replace","trim","isVisible","hasData","undefined","_data","setData","data","emit","markForCheck","getData","removeData","addBodyClass","addClass","body","removeBodyClass","removeClass","detectChanges","targetPlacement","isBrowser","nsmDialog","nsmContent","nsmOverlay","targetElement","querySelector","targetElementRect","getBoundingClientRect","bodyRect","first","nativeElement","nsmContentRect","nsmDialogRect","marginLeft","parseInt","getComputedStyle","marginTop","offsetTop","height","offsetLeft","left","width","setStyle","name","extraData","instance","id","modal","event","CustomEvent","detail","window","dispatchEvent","Object","defineProperty","get","isPlatformBrowser","enumerable","configurable","forEach","viewContainerRef","clear","createComponent","decorators","type","Component","args","selector","template","ctorParameters","Renderer2","ChangeDetectorRef","ComponentFactoryResolver","Inject","DOCUMENT","PLATFORM_ID","propDecorators","Input","Output","ViewChildren","read","ViewContainerRef","HostListener","NgxSmartModalStackService","_modalStack","addModal","modalInstance","i","findIndex","o","push","getModal","find","getModalStack","getOpenedModals","filter","getTopOpenedModal","map","reduce","highest","item","getHigherIndex","Math","max","apply","concat","getModalStackCount","removeModal","splice","Injectable","NgxSmartModalService","_componentFactoryResolver","_appRef","_injector","applicationRef","_escapeKeyboardEvent","key","closeLatestModal","_trapFocusModal","document","activeElement","preventDefault","stopPropagation","focus","_addEvents","_openModal","_closeModal","closeAll","_toggleModal","setModalData","getModalData","resetModalData","removed","create","content","options","componentFactory","ngContent","_resolveNgContent","componentRef","Type","attachView","hostView","domElem","rootNodes","appendChild","addEventListener","_initModal","_deleteModal","_dismissModal","lastElementFocused","setTimeout","setAttribute","removeEventListener","removeAttribute","createTextNode","TemplateRef","viewRef","createEmbeddedView","ApplicationRef","Injector","NgxSmartModalModule","serivce","forRoot","ngModule","providers","forChild","NgModule","declarations","entryComponents","imports","CommonModule","Éµa","value"],"mappings":"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","file":"ngx-smart-modal.umd.min.js.map","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.ngxSmartModal = {}),global.ng.core,global.ng.common));\n}(this, (function (exports,core,common) { 'use strict';\n\n/**\n * @license ngx-smart-modal\n * MIT license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalConfig = {\n    bodyClassOpen: 'dialog-open',\n    prefixEvent: 'ngx-smart-modal.'\n};\n/**\n * @record\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalComponent = (function () {\n    function NgxSmartModalComponent(_renderer, _changeDetectorRef, componentFactoryResolver, _document, _platformId) {\n        this._renderer = _renderer;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this._document = _document;\n        this._platformId = _platformId;\n        this.closable = true;\n        this.escapable = true;\n        this.dismissable = true;\n        this.identifier = '';\n        this.customClass = 'nsm-dialog-animation-fade';\n        this.visible = false;\n        this.backdrop = true;\n        this.force = true;\n        this.hideDelay = 500;\n        this.autostart = false;\n        this.target = '';\n        this.ariaLabel = null;\n        this.ariaLabelledBy = null;\n        this.ariaDescribedBy = null;\n        this.refocus = true;\n        this.visibleChange = new core.EventEmitter();\n        this.onClose = new core.EventEmitter();\n        this.onCloseFinished = new core.EventEmitter();\n        this.onDismiss = new core.EventEmitter();\n        this.onDismissFinished = new core.EventEmitter();\n        this.onAnyCloseEvent = new core.EventEmitter();\n        this.onAnyCloseEventFinished = new core.EventEmitter();\n        this.onOpen = new core.EventEmitter();\n        this.onOpenFinished = new core.EventEmitter();\n        this.onEscape = new core.EventEmitter();\n        this.onDataAdded = new core.EventEmitter();\n        this.onDataRemoved = new core.EventEmitter();\n        this.layerPosition = 1041;\n        this.overlayVisible = false;\n        this.openedClass = false;\n        this.createFrom = 'html';\n    }\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.identifier || !this.identifier.length) {\n            throw new Error('identifier field isnât set. Please set one before calling <ngx-smart-modal> in a template.');\n        }\n        this._sendEvent('create');\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.contentComponent) {\n            var /** @type {?} */ factory_1 = this.componentFactoryResolver.resolveComponentFactory(this.contentComponent);\n            this.createDynamicContent(this.dynamicContentContainer, factory_1);\n            this.dynamicContentContainer.changes.subscribe(function (contentViewContainers) {\n                _this.createDynamicContent(contentViewContainers, factory_1);\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._sendEvent('delete');\n    };\n    /**\n     * Open the modal instance\n     *\n     * @param {?=} top open the modal top of all other\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.open = /**\n     * Open the modal instance\n     *\n     * @param {?=} top open the modal top of all other\n     * @return {?} the modal component\n     */\n    function (top) {\n        this._sendEvent('open', { top: top });\n        return this;\n    };\n    /**\n     * Close the modal instance\n     *\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.close = /**\n     * Close the modal instance\n     *\n     * @return {?} the modal component\n     */\n    function () {\n        this._sendEvent('close');\n        return this;\n    };\n    /**\n     * Dismiss the modal instance\n     *\n     * @param {?} e the event sent by the browser\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.dismiss = /**\n     * Dismiss the modal instance\n     *\n     * @param {?} e the event sent by the browser\n     * @return {?} the modal component\n     */\n    function (e) {\n        if (!this.dismissable || !e.target.classList.contains('overlay')) {\n            return this;\n        }\n        this._sendEvent('dismiss');\n        return this;\n    };\n    /**\n     * Toggle visibility of the modal instance\n     *\n     * @param {?=} top open the modal top of all other\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.toggle = /**\n     * Toggle visibility of the modal instance\n     *\n     * @param {?=} top open the modal top of all other\n     * @return {?} the modal component\n     */\n    function (top) {\n        this._sendEvent('toggle', { top: top });\n        return this;\n    };\n    /**\n     * Add a custom class to the modal instance\n     *\n     * @param {?} className the class to add\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.addCustomClass = /**\n     * Add a custom class to the modal instance\n     *\n     * @param {?} className the class to add\n     * @return {?} the modal component\n     */\n    function (className) {\n        if (!this.customClass.length) {\n            this.customClass = className;\n        }\n        else {\n            this.customClass += ' ' + className;\n        }\n        return this;\n    };\n    /**\n     * Remove a custom class to the modal instance\n     *\n     * @param {?=} className the class to remove\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.removeCustomClass = /**\n     * Remove a custom class to the modal instance\n     *\n     * @param {?=} className the class to remove\n     * @return {?} the modal component\n     */\n    function (className) {\n        if (className) {\n            this.customClass = this.customClass.replace(className, '').trim();\n        }\n        else {\n            this.customClass = '';\n        }\n        return this;\n    };\n    /**\n     * Returns the visibility state of the modal instance\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.isVisible = /**\n     * Returns the visibility state of the modal instance\n     * @return {?}\n     */\n    function () {\n        return this.visible;\n    };\n    /**\n     * Checks if data is attached to the modal instance\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.hasData = /**\n     * Checks if data is attached to the modal instance\n     * @return {?}\n     */\n    function () {\n        return this._data !== undefined;\n    };\n    /**\n     * Attach data to the modal instance\n     *\n     * @param {?} data the data to attach\n     * @param {?=} force override potentially attached data\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.setData = /**\n     * Attach data to the modal instance\n     *\n     * @param {?} data the data to attach\n     * @param {?=} force override potentially attached data\n     * @return {?} the modal component\n     */\n    function (data, force) {\n        if (!this.hasData() || (this.hasData() && force)) {\n            this._data = data;\n            this.onDataAdded.emit(this._data);\n            this.markForCheck();\n        }\n        return this;\n    };\n    /**\n     * Retrieve the data attached to the modal instance\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.getData = /**\n     * Retrieve the data attached to the modal instance\n     * @return {?}\n     */\n    function () {\n        return this._data;\n    };\n    /**\n     * Remove the data attached to the modal instance\n     *\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.removeData = /**\n     * Remove the data attached to the modal instance\n     *\n     * @return {?} the modal component\n     */\n    function () {\n        this._data = undefined;\n        this.onDataRemoved.emit(true);\n        this.markForCheck();\n        return this;\n    };\n    /**\n     * Add body class modal opened\n     *\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.addBodyClass = /**\n     * Add body class modal opened\n     *\n     * @return {?} the modal component\n     */\n    function () {\n        this._renderer.addClass(this._document.body, NgxSmartModalConfig.bodyClassOpen);\n        return this;\n    };\n    /**\n     * Add body class modal opened\n     *\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.removeBodyClass = /**\n     * Add body class modal opened\n     *\n     * @return {?} the modal component\n     */\n    function () {\n        this._renderer.removeClass(this._document.body, NgxSmartModalConfig.bodyClassOpen);\n        return this;\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.markForCheck = /**\n     * @return {?}\n     */\n    function () {\n        try {\n            this._changeDetectorRef.detectChanges();\n        }\n        catch (/** @type {?} */ e) {\n        }\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Listens for window resize event and recalculates modal instance position if it is element-relative\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.targetPlacement = /**\n     * Listens for window resize event and recalculates modal instance position if it is element-relative\n     * @return {?}\n     */\n    function () {\n        if (!this.isBrowser || !this.nsmDialog.length || !this.nsmContent.length || !this.nsmOverlay.length || !this.target) {\n            return false;\n        }\n        var /** @type {?} */ targetElement = this._document.querySelector(this.target);\n        if (!targetElement) {\n            return false;\n        }\n        var /** @type {?} */ targetElementRect = targetElement.getBoundingClientRect();\n        var /** @type {?} */ bodyRect = this.nsmOverlay.first.nativeElement.getBoundingClientRect();\n        var /** @type {?} */ nsmContentRect = this.nsmContent.first.nativeElement.getBoundingClientRect();\n        var /** @type {?} */ nsmDialogRect = this.nsmDialog.first.nativeElement.getBoundingClientRect();\n        var /** @type {?} */ marginLeft = parseInt(/** @type {?} */ (getComputedStyle(this.nsmContent.first.nativeElement).marginLeft), 10);\n        var /** @type {?} */ marginTop = parseInt(/** @type {?} */ (getComputedStyle(this.nsmContent.first.nativeElement).marginTop), 10);\n        var /** @type {?} */ offsetTop = targetElementRect.top - nsmDialogRect.top - ((nsmContentRect.height - targetElementRect.height) / 2);\n        var /** @type {?} */ offsetLeft = targetElementRect.left - nsmDialogRect.left - ((nsmContentRect.width - targetElementRect.width) / 2);\n        if (offsetLeft + nsmDialogRect.left + nsmContentRect.width + (marginLeft * 2) > bodyRect.width) {\n            offsetLeft = bodyRect.width - (nsmDialogRect.left + nsmContentRect.width) - (marginLeft * 2);\n        }\n        else if (offsetLeft + nsmDialogRect.left < 0) {\n            offsetLeft = -nsmDialogRect.left;\n        }\n        if (offsetTop + nsmDialogRect.top + nsmContentRect.height + marginTop > bodyRect.height) {\n            offsetTop = bodyRect.height - (nsmDialogRect.top + nsmContentRect.height) - marginTop;\n        }\n        this._renderer.setStyle(this.nsmContent.first.nativeElement, 'top', (offsetTop < 0 ? 0 : offsetTop) + 'px');\n        this._renderer.setStyle(this.nsmContent.first.nativeElement, 'left', offsetLeft + 'px');\n    };\n    /**\n     * @param {?} name\n     * @param {?=} extraData\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype._sendEvent = /**\n     * @param {?} name\n     * @param {?=} extraData\n     * @return {?}\n     */\n    function (name, extraData) {\n        if (!this.isBrowser) {\n            return false;\n        }\n        var /** @type {?} */ data = {\n            extraData: extraData,\n            instance: { id: this.identifier, modal: this }\n        };\n        var /** @type {?} */ event = new CustomEvent(NgxSmartModalConfig.prefixEvent + name, { detail: data });\n        return window.dispatchEvent(event);\n    };\n    Object.defineProperty(NgxSmartModalComponent.prototype, \"isBrowser\", {\n        get: /**\n         * Is current platform browser\n         * @return {?}\n         */\n        function () {\n            return common.isPlatformBrowser(this._platformId);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates content inside provided ViewContainerRef\n     * @param {?} changes\n     * @param {?} factory\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.createDynamicContent = /**\n     * Creates content inside provided ViewContainerRef\n     * @param {?} changes\n     * @param {?} factory\n     * @return {?}\n     */\n    function (changes, factory) {\n        var _this = this;\n        changes.forEach(function (viewContainerRef) {\n            viewContainerRef.clear();\n            viewContainerRef.createComponent(factory);\n            _this.markForCheck();\n        });\n    };\n    NgxSmartModalComponent.decorators = [\n        { type: core.Component, args: [{\n                    selector: 'ngx-smart-modal',\n                    template: \"\\n    <div *ngIf=\\\"overlayVisible\\\"\\n         [style.z-index]=\\\"visible ? layerPosition-1 : -1\\\"\\n         [ngClass]=\\\"{'transparent':!backdrop, 'overlay':true, 'nsm-overlay-open':openedClass}\\\"\\n         (mousedown)=\\\"dismiss($event)\\\" #nsmOverlay>\\n      <div [style.z-index]=\\\"visible ? layerPosition : -1\\\"\\n           [ngClass]=\\\"['nsm-dialog', customClass, openedClass ? 'nsm-dialog-open': 'nsm-dialog-close']\\\" #nsmDialog\\n           [attr.aria-hidden]=\\\"openedClass ? false : true\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledBy\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedBy\\\">\\n        <div class=\\\"nsm-content\\\" #nsmContent>\\n          <div class=\\\"nsm-body\\\">\\n            <ng-template #dynamicContent></ng-template>\\n            <ng-content></ng-content>\\n\\n          </div>\\n          <button type=\\\"button\\\" *ngIf=\\\"closable\\\" (click)=\\\"close()\\\" aria-label=\\\"Close\\\" class=\\\"nsm-dialog-btn-close\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" id=\\\"Layer_1\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 512 512\\\"\\n                 xml:space=\\\"preserve\\\" width=\\\"16px\\\" height=\\\"16px\\\">\\n              <g>\\n                <path d=\\\"M505.943,6.058c-8.077-8.077-21.172-8.077-29.249,0L6.058,476.693c-8.077,8.077-8.077,21.172,0,29.249    C10.096,509.982,15.39,512,20.683,512c5.293,0,10.586-2.019,14.625-6.059L505.943,35.306    C514.019,27.23,514.019,14.135,505.943,6.058z\\\"\\n                      fill=\\\"currentColor\\\"/>\\n              </g>\\n              <g>\\n                <path d=\\\"M505.942,476.694L35.306,6.059c-8.076-8.077-21.172-8.077-29.248,0c-8.077,8.076-8.077,21.171,0,29.248l470.636,470.636    c4.038,4.039,9.332,6.058,14.625,6.058c5.293,0,10.587-2.019,14.624-6.057C514.018,497.866,514.018,484.771,505.942,476.694z\\\"\\n                      fill=\\\"currentColor\\\"/>\\n              </g>\\n            </svg>\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    NgxSmartModalComponent.ctorParameters = function () { return [\n        { type: core.Renderer2, },\n        { type: core.ChangeDetectorRef, },\n        { type: core.ComponentFactoryResolver, },\n        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] },] },\n        { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },\n    ]; };\n    NgxSmartModalComponent.propDecorators = {\n        \"closable\": [{ type: core.Input },],\n        \"escapable\": [{ type: core.Input },],\n        \"dismissable\": [{ type: core.Input },],\n        \"identifier\": [{ type: core.Input },],\n        \"customClass\": [{ type: core.Input },],\n        \"visible\": [{ type: core.Input },],\n        \"backdrop\": [{ type: core.Input },],\n        \"force\": [{ type: core.Input },],\n        \"hideDelay\": [{ type: core.Input },],\n        \"autostart\": [{ type: core.Input },],\n        \"target\": [{ type: core.Input },],\n        \"ariaLabel\": [{ type: core.Input },],\n        \"ariaLabelledBy\": [{ type: core.Input },],\n        \"ariaDescribedBy\": [{ type: core.Input },],\n        \"refocus\": [{ type: core.Input },],\n        \"visibleChange\": [{ type: core.Output },],\n        \"onClose\": [{ type: core.Output },],\n        \"onCloseFinished\": [{ type: core.Output },],\n        \"onDismiss\": [{ type: core.Output },],\n        \"onDismissFinished\": [{ type: core.Output },],\n        \"onAnyCloseEvent\": [{ type: core.Output },],\n        \"onAnyCloseEventFinished\": [{ type: core.Output },],\n        \"onOpen\": [{ type: core.Output },],\n        \"onOpenFinished\": [{ type: core.Output },],\n        \"onEscape\": [{ type: core.Output },],\n        \"onDataAdded\": [{ type: core.Output },],\n        \"onDataRemoved\": [{ type: core.Output },],\n        \"nsmContent\": [{ type: core.ViewChildren, args: ['nsmContent',] },],\n        \"nsmDialog\": [{ type: core.ViewChildren, args: ['nsmDialog',] },],\n        \"nsmOverlay\": [{ type: core.ViewChildren, args: ['nsmOverlay',] },],\n        \"dynamicContentContainer\": [{ type: core.ViewChildren, args: ['dynamicContent', { read: core.ViewContainerRef },] },],\n        \"targetPlacement\": [{ type: core.HostListener, args: ['window:resize',] },],\n    };\n    return NgxSmartModalComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalStackService = (function () {\n    function NgxSmartModalStackService() {\n        this._modalStack = [];\n    }\n    /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param {?} modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param {?=} force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @return {?} nothing special.\n     */\n    NgxSmartModalStackService.prototype.addModal = /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param {?} modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param {?=} force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @return {?} nothing special.\n     */\n    function (modalInstance, force) {\n        if (force) {\n            var /** @type {?} */ i = this._modalStack.findIndex(function (o) { return o.id === modalInstance.id; });\n            if (i > -1) {\n                this._modalStack[i].modal = modalInstance.modal;\n            }\n            else {\n                this._modalStack.push(modalInstance);\n            }\n            return;\n        }\n        this._modalStack.push(modalInstance);\n    };\n    /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    NgxSmartModalStackService.prototype.getModal = /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    function (id) {\n        var /** @type {?} */ i = this._modalStack.find(function (o) { return o.id === id; });\n        if (i !== undefined) {\n            return i.modal;\n        }\n        else {\n            throw new Error(\"Cannot find modal with identifier \" + id);\n        }\n    };\n    /**\n     * Retrieve all the created modals.\n     *\n     * @return {?} an array that contains all modal instances.\n     */\n    NgxSmartModalStackService.prototype.getModalStack = /**\n     * Retrieve all the created modals.\n     *\n     * @return {?} an array that contains all modal instances.\n     */\n    function () {\n        return this._modalStack;\n    };\n    /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @return {?} an array that contains all the opened modals.\n     */\n    NgxSmartModalStackService.prototype.getOpenedModals = /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @return {?} an array that contains all the opened modals.\n     */\n    function () {\n        return this._modalStack.filter(function (o) { return o.modal.visible; });\n    };\n    /**\n     * Retrieve the opened modal with highest z-index.\n     *\n     * @return {?} the opened modal with highest z-index.\n     */\n    NgxSmartModalStackService.prototype.getTopOpenedModal = /**\n     * Retrieve the opened modal with highest z-index.\n     *\n     * @return {?} the opened modal with highest z-index.\n     */\n    function () {\n        if (!this.getOpenedModals().length) {\n            throw new Error('No modal is opened');\n        }\n        return this.getOpenedModals()\n            .map(function (o) { return o.modal; })\n            .reduce(function (highest, item) { return item.layerPosition > highest.layerPosition ? item : highest; }, this.getOpenedModals()[0].modal);\n    };\n    /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @return {?} a higher index from all the existing modal instances.\n     */\n    NgxSmartModalStackService.prototype.getHigherIndex = /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @return {?} a higher index from all the existing modal instances.\n     */\n    function () {\n        return Math.max.apply(Math, this._modalStack.map(function (o) { return o.modal.layerPosition; }).concat([1041])) + 1;\n    };\n    /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @return {?} the number of modal instances.\n     */\n    NgxSmartModalStackService.prototype.getModalStackCount = /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @return {?} the number of modal instances.\n     */\n    function () {\n        return this._modalStack.length;\n    };\n    /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param {?} id The modal identifier.\n     * @return {?} the removed modal instance.\n     */\n    NgxSmartModalStackService.prototype.removeModal = /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param {?} id The modal identifier.\n     * @return {?} the removed modal instance.\n     */\n    function (id) {\n        var /** @type {?} */ i = this._modalStack.findIndex(function (o) { return o.id === id; });\n        if (i > -1) {\n            this._modalStack.splice(i, 1);\n        }\n    };\n    NgxSmartModalStackService.decorators = [\n        { type: core.Injectable },\n    ];\n    /** @nocollapse */\n    NgxSmartModalStackService.ctorParameters = function () { return []; };\n    return NgxSmartModalStackService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalService = (function () {\n    function NgxSmartModalService(_componentFactoryResolver, _appRef, _injector, _modalStack, applicationRef, _document, _platformId) {\n        var _this = this;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._modalStack = _modalStack;\n        this.applicationRef = applicationRef;\n        this._document = _document;\n        this._platformId = _platformId;\n        /**\n         * Close the latest opened modal if escape key event is emitted\n         * @param event The Keyboard Event\n         */\n        this._escapeKeyboardEvent = function (event) {\n            if (event.key === 'Escape') {\n                try {\n                    var /** @type {?} */ modal = _this.getTopOpenedModal();\n                    if (!modal.escapable) {\n                        return false;\n                    }\n                    modal.onEscape.emit(modal);\n                    _this.closeLatestModal();\n                    return true;\n                }\n                catch (/** @type {?} */ e) {\n                    return false;\n                }\n            }\n            return false;\n        };\n        /**\n         * While modal is open, the focus stay on it\n         * @param event The Keyboar dEvent\n         */\n        this._trapFocusModal = function (event) {\n            if (event.key === 'Tab') {\n                try {\n                    var /** @type {?} */ modal = _this.getTopOpenedModal();\n                    if (!modal.nsmDialog.first.nativeElement.contains(document.activeElement)) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        modal.nsmDialog.first.nativeElement.focus();\n                    }\n                    return true;\n                }\n                catch (/** @type {?} */ e) {\n                    return false;\n                }\n            }\n            return false;\n        };\n        this._addEvents();\n    }\n    /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param {?} modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param {?=} force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @return {?} nothing special.\n     */\n    NgxSmartModalService.prototype.addModal = /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param {?} modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param {?=} force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @return {?} nothing special.\n     */\n    function (modalInstance, force) {\n        this._modalStack.addModal(modalInstance, force);\n    };\n    /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.getModal = /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    function (id) {\n        return this._modalStack.getModal(id);\n    };\n    /**\n     * Alias of `getModal` to retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.get = /**\n     * Alias of `getModal` to retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    function (id) {\n        return this.getModal(id);\n    };\n    /**\n     * Open a given modal\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?=} force Tell the modal to open top of all other opened modals\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.open = /**\n     * Open a given modal\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?=} force Tell the modal to open top of all other opened modals\n     * @return {?}\n     */\n    function (id, force) {\n        if (force === void 0) { force = false; }\n        return this._openModal(this.get(id), force);\n    };\n    /**\n     * Close a given modal\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.close = /**\n     * Close a given modal\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    function (id) {\n        return this._closeModal(this.get(id));\n    };\n    /**\n     * Close all opened modals\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.closeAll = /**\n     * Close all opened modals\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.getOpenedModals().forEach(function (instance) {\n            _this._closeModal(instance.modal);\n        });\n    };\n    /**\n     * Toggles a given modal\n     * If the retrieved modal is opened it closes it, else it opens it.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?=} force Tell the modal to open top of all other opened modals\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.toggle = /**\n     * Toggles a given modal\n     * If the retrieved modal is opened it closes it, else it opens it.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?=} force Tell the modal to open top of all other opened modals\n     * @return {?}\n     */\n    function (id, force) {\n        if (force === void 0) { force = false; }\n        return this._toggleModal(this.get(id), force);\n    };\n    /**\n     * Retrieve all the created modals.\n     *\n     * @return {?} an array that contains all modal instances.\n     */\n    NgxSmartModalService.prototype.getModalStack = /**\n     * Retrieve all the created modals.\n     *\n     * @return {?} an array that contains all modal instances.\n     */\n    function () {\n        return this._modalStack.getModalStack();\n    };\n    /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @return {?} an array that contains all the opened modals.\n     */\n    NgxSmartModalService.prototype.getOpenedModals = /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @return {?} an array that contains all the opened modals.\n     */\n    function () {\n        return this._modalStack.getOpenedModals();\n    };\n    /**\n     * Retrieve the opened modal with highest z-index.\n     *\n     * @return {?} the opened modal with highest z-index.\n     */\n    NgxSmartModalService.prototype.getTopOpenedModal = /**\n     * Retrieve the opened modal with highest z-index.\n     *\n     * @return {?} the opened modal with highest z-index.\n     */\n    function () {\n        return this._modalStack.getTopOpenedModal();\n    };\n    /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @return {?} a higher index from all the existing modal instances.\n     */\n    NgxSmartModalService.prototype.getHigherIndex = /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @return {?} a higher index from all the existing modal instances.\n     */\n    function () {\n        return this._modalStack.getHigherIndex();\n    };\n    /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @return {?} the number of modal instances.\n     */\n    NgxSmartModalService.prototype.getModalStackCount = /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @return {?} the number of modal instances.\n     */\n    function () {\n        return this._modalStack.getModalStackCount();\n    };\n    /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param {?} id The modal identifier.\n     * @return {?} the removed modal instance.\n     */\n    NgxSmartModalService.prototype.removeModal = /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param {?} id The modal identifier.\n     * @return {?} the removed modal instance.\n     */\n    function (id) {\n        this._modalStack.removeModal(id);\n    };\n    /**\n     * Associate data to an identified modal. If the modal isn't already associated to some data, it creates a new\n     * entry in the `modalData` array with its `id` and the given `data`. If the modal already has data, it rewrites\n     * them with the new ones. Finally if no modal found it returns an error message in the console and false value\n     * as method output.\n     *\n     * @param {?} data The data you want to associate to the modal.\n     * @param {?} id The modal identifier.\n     * @param {?=} force If true, overrides the previous stored data if there was.\n     * @return {?} true if the given modal exists and the process has been tried, either false.\n     */\n    NgxSmartModalService.prototype.setModalData = /**\n     * Associate data to an identified modal. If the modal isn't already associated to some data, it creates a new\n     * entry in the `modalData` array with its `id` and the given `data`. If the modal already has data, it rewrites\n     * them with the new ones. Finally if no modal found it returns an error message in the console and false value\n     * as method output.\n     *\n     * @param {?} data The data you want to associate to the modal.\n     * @param {?} id The modal identifier.\n     * @param {?=} force If true, overrides the previous stored data if there was.\n     * @return {?} true if the given modal exists and the process has been tried, either false.\n     */\n    function (data, id, force) {\n        var /** @type {?} */ i;\n        if (i = this.get(id)) {\n            i.setData(data, force);\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Retrieve modal data by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} the associated modal data.\n     */\n    NgxSmartModalService.prototype.getModalData = /**\n     * Retrieve modal data by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} the associated modal data.\n     */\n    function (id) {\n        var /** @type {?} */ i;\n        if (i = this.get(id)) {\n            return i.getData();\n        }\n        return null;\n    };\n    /**\n     * Reset the data attached to a given modal.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} the removed data or false if modal doesn't exist.\n     */\n    NgxSmartModalService.prototype.resetModalData = /**\n     * Reset the data attached to a given modal.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} the removed data or false if modal doesn't exist.\n     */\n    function (id) {\n        if (!!this._modalStack.getModalStack().find(function (o) { return o.id === id; })) {\n            var /** @type {?} */ removed = this.getModal(id).getData();\n            this.getModal(id).removeData();\n            return removed;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Close the latest opened modal if it has been declared as escapable\n     * Using a debounce system because one or more modals could be listening\n     * escape key press event.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.closeLatestModal = /**\n     * Close the latest opened modal if it has been declared as escapable\n     * Using a debounce system because one or more modals could be listening\n     * escape key press event.\n     * @return {?}\n     */\n    function () {\n        this.getTopOpenedModal().close();\n    };\n    /**\n     * Create dynamic NgxSmartModalComponent\n     * @template T\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?} content The modal content ( string, templateRef or Component )\n     * @param {?=} options\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.create = /**\n     * Create dynamic NgxSmartModalComponent\n     * @template T\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?} content The modal content ( string, templateRef or Component )\n     * @param {?=} options\n     * @return {?}\n     */\n    function (id, content, options) {\n        if (options === void 0) { options = {}; }\n        try {\n            return this.getModal(id);\n        }\n        catch (/** @type {?} */ e) {\n            var /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(NgxSmartModalComponent);\n            var /** @type {?} */ ngContent = this._resolveNgContent(content);\n            var /** @type {?} */ componentRef = componentFactory.create(this._injector, ngContent);\n            if (content instanceof core.Type) {\n                componentRef.instance.contentComponent = content;\n            }\n            componentRef.instance.identifier = id;\n            componentRef.instance.createFrom = 'service';\n            if (typeof options.closable === 'boolean') {\n                componentRef.instance.closable = options.closable;\n            }\n            if (typeof options.escapable === 'boolean') {\n                componentRef.instance.escapable = options.escapable;\n            }\n            if (typeof options.dismissable === 'boolean') {\n                componentRef.instance.dismissable = options.dismissable;\n            }\n            if (typeof options.customClass === 'string') {\n                componentRef.instance.customClass = options.customClass;\n            }\n            if (typeof options.backdrop === 'boolean') {\n                componentRef.instance.backdrop = options.backdrop;\n            }\n            if (typeof options.force === 'boolean') {\n                componentRef.instance.force = options.force;\n            }\n            if (typeof options.hideDelay === 'number') {\n                componentRef.instance.hideDelay = options.hideDelay;\n            }\n            if (typeof options.autostart === 'boolean') {\n                componentRef.instance.autostart = options.autostart;\n            }\n            if (typeof options.target === 'string') {\n                componentRef.instance.target = options.target;\n            }\n            if (typeof options.ariaLabel === 'string') {\n                componentRef.instance.ariaLabel = options.ariaLabel;\n            }\n            if (typeof options.ariaLabelledBy === 'string') {\n                componentRef.instance.ariaLabelledBy = options.ariaLabelledBy;\n            }\n            if (typeof options.ariaDescribedBy === 'string') {\n                componentRef.instance.ariaDescribedBy = options.ariaDescribedBy;\n            }\n            if (typeof options.refocus === 'boolean') {\n                componentRef.instance.refocus = options.refocus;\n            }\n            this._appRef.attachView(componentRef.hostView);\n            var /** @type {?} */ domElem = /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);\n            this._document.body.appendChild(domElem);\n            return componentRef.instance;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._addEvents = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.isBrowser) {\n            return false;\n        }\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'create', /** @type {?} */ ((function (e) {\n            _this._initModal(e.detail.instance);\n        })));\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'delete', /** @type {?} */ ((function (e) {\n            _this._deleteModal(e.detail.instance);\n        })));\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'open', /** @type {?} */ ((function (e) {\n            _this._openModal(e.detail.instance.modal, e.detail.top);\n        })));\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'toggle', /** @type {?} */ ((function (e) {\n            _this._toggleModal(e.detail.instance.modal, e.detail.top);\n        })));\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'close', /** @type {?} */ ((function (e) {\n            _this._closeModal(e.detail.instance.modal);\n        })));\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'dismiss', /** @type {?} */ ((function (e) {\n            _this._dismissModal(e.detail.instance.modal);\n        })));\n        window.addEventListener('keyup', this._escapeKeyboardEvent);\n        return true;\n    };\n    /**\n     * @param {?} modalInstance\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._initModal = /**\n     * @param {?} modalInstance\n     * @return {?}\n     */\n    function (modalInstance) {\n        modalInstance.modal.layerPosition += this.getModalStackCount();\n        this.addModal(modalInstance, modalInstance.modal.force);\n        if (modalInstance.modal.autostart) {\n            this.open(modalInstance.id);\n        }\n    };\n    /**\n     * @param {?} modal\n     * @param {?=} top\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._openModal = /**\n     * @param {?} modal\n     * @param {?=} top\n     * @return {?}\n     */\n    function (modal, top) {\n        if (modal.visible) {\n            return false;\n        }\n        this.lastElementFocused = document.activeElement;\n        if (modal.escapable) {\n            window.addEventListener('keyup', this._escapeKeyboardEvent);\n        }\n        if (modal.backdrop) {\n            window.addEventListener('keydown', this._trapFocusModal);\n        }\n        if (top) {\n            modal.layerPosition = this.getHigherIndex();\n        }\n        modal.addBodyClass();\n        modal.overlayVisible = true;\n        modal.visible = true;\n        modal.onOpen.emit(modal);\n        modal.markForCheck();\n        setTimeout(function () {\n            modal.openedClass = true;\n            if (modal.target) {\n                modal.targetPlacement();\n            }\n            modal.nsmDialog.first.nativeElement.setAttribute('role', 'dialog');\n            modal.nsmDialog.first.nativeElement.setAttribute('tabIndex', '-1');\n            modal.nsmDialog.first.nativeElement.setAttribute('aria-modal', 'true');\n            modal.nsmDialog.first.nativeElement.focus();\n            modal.markForCheck();\n            modal.onOpenFinished.emit(modal);\n        });\n        return true;\n    };\n    /**\n     * @param {?} modal\n     * @param {?=} top\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._toggleModal = /**\n     * @param {?} modal\n     * @param {?=} top\n     * @return {?}\n     */\n    function (modal, top) {\n        if (modal.visible) {\n            return this._closeModal(modal);\n        }\n        else {\n            return this._openModal(modal, top);\n        }\n    };\n    /**\n     * @param {?} modal\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._closeModal = /**\n     * @param {?} modal\n     * @return {?}\n     */\n    function (modal) {\n        var _this = this;\n        if (!modal.openedClass) {\n            return false;\n        }\n        modal.openedClass = false;\n        modal.onClose.emit(modal);\n        modal.onAnyCloseEvent.emit(modal);\n        if (this.getOpenedModals().length < 2) {\n            modal.removeBodyClass();\n            window.removeEventListener('keyup', this._escapeKeyboardEvent);\n            window.removeEventListener('keydown', this._trapFocusModal);\n        }\n        setTimeout(function () {\n            modal.visibleChange.emit(modal.visible);\n            modal.visible = false;\n            modal.overlayVisible = false;\n            modal.nsmDialog.first.nativeElement.removeAttribute('tabIndex');\n            modal.markForCheck();\n            modal.onCloseFinished.emit(modal);\n            modal.onAnyCloseEventFinished.emit(modal);\n            if (modal.refocus) {\n                _this.lastElementFocused.focus();\n            }\n        }, modal.hideDelay);\n        return true;\n    };\n    /**\n     * @param {?} modal\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._dismissModal = /**\n     * @param {?} modal\n     * @return {?}\n     */\n    function (modal) {\n        if (!modal.openedClass) {\n            return false;\n        }\n        modal.openedClass = false;\n        modal.onDismiss.emit(modal);\n        modal.onAnyCloseEvent.emit(modal);\n        if (this.getOpenedModals().length < 2) {\n            modal.removeBodyClass();\n        }\n        setTimeout(function () {\n            modal.visible = false;\n            modal.visibleChange.emit(modal.visible);\n            modal.overlayVisible = false;\n            modal.markForCheck();\n            modal.onDismissFinished.emit(modal);\n            modal.onAnyCloseEventFinished.emit(modal);\n        }, modal.hideDelay);\n        return true;\n    };\n    /**\n     * @param {?} modalInstance\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._deleteModal = /**\n     * @param {?} modalInstance\n     * @return {?}\n     */\n    function (modalInstance) {\n        this.removeModal(modalInstance.id);\n        if (!this.getModalStack().length) {\n            modalInstance.modal.removeBodyClass();\n        }\n    };\n    /**\n     * Resolve content according to the types\n     * @template T\n     * @param {?} content The modal content ( string, templateRef or Component )\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._resolveNgContent = /**\n     * Resolve content according to the types\n     * @template T\n     * @param {?} content The modal content ( string, templateRef or Component )\n     * @return {?}\n     */\n    function (content) {\n        if (typeof content === 'string') {\n            var /** @type {?} */ element = this._document.createTextNode(content);\n            return [[element]];\n        }\n        if (content instanceof core.TemplateRef) {\n            var /** @type {?} */ viewRef = content.createEmbeddedView(/** @type {?} */ (null));\n            this.applicationRef.attachView(viewRef);\n            return [viewRef.rootNodes];\n        }\n        return [];\n    };\n    Object.defineProperty(NgxSmartModalService.prototype, \"isBrowser\", {\n        get: /**\n         * Is current platform browser\n         * @return {?}\n         */\n        function () {\n            return common.isPlatformBrowser(this._platformId);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgxSmartModalService.decorators = [\n        { type: core.Injectable },\n    ];\n    /** @nocollapse */\n    NgxSmartModalService.ctorParameters = function () { return [\n        { type: core.ComponentFactoryResolver, },\n        { type: core.ApplicationRef, },\n        { type: core.Injector, },\n        { type: NgxSmartModalStackService, },\n        { type: core.ApplicationRef, },\n        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] },] },\n        { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },\n    ]; };\n    return NgxSmartModalService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalModule = (function () {\n    function NgxSmartModalModule(serivce) {\n        this.serivce = serivce;\n    }\n    /**\n     * Use in AppModule: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    NgxSmartModalModule.forRoot = /**\n     * Use in AppModule: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: NgxSmartModalModule,\n            providers: [\n                NgxSmartModalService,\n                NgxSmartModalStackService\n            ]\n        };\n    };\n    /**\n     * Use in features modules with lazy loading: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    NgxSmartModalModule.forChild = /**\n     * Use in features modules with lazy loading: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: NgxSmartModalModule,\n            providers: [\n                NgxSmartModalService,\n                NgxSmartModalStackService\n            ]\n        };\n    };\n    NgxSmartModalModule.decorators = [\n        { type: core.NgModule, args: [{\n                    declarations: [NgxSmartModalComponent],\n                    entryComponents: [NgxSmartModalComponent],\n                    exports: [NgxSmartModalComponent],\n                    imports: [common.CommonModule]\n                },] },\n    ];\n    /** @nocollapse */\n    NgxSmartModalModule.ctorParameters = function () { return [\n        { type: NgxSmartModalService, },\n    ]; };\n    return NgxSmartModalModule;\n}());\n\nexports.NgxSmartModalService = NgxSmartModalService;\nexports.NgxSmartModalComponent = NgxSmartModalComponent;\nexports.NgxSmartModalModule = NgxSmartModalModule;\nexports.NgxSmartModalConfig = NgxSmartModalConfig;\nexports.Éµa = NgxSmartModalStackService;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=ngx-smart-modal.umd.js.map\n"]}