{"version":3,"file":"ngx-smart-modal-stack.service.d.ts","sources":["ngx-smart-modal-stack.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NgxSmartModalComponent } from '../../src/components/ngx-smart-modal.component';\nimport { ModalInstance } from './modal-instance';\nexport declare class NgxSmartModalStackService {\n    private _modalStack;\n    constructor();\n    /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @returns nothing special.\n     */\n    addModal(modalInstance: ModalInstance, force?: boolean): void;\n    /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param id The modal identifier used at creation time.\n     */\n    getModal(id: string): NgxSmartModalComponent;\n    /**\n     * Retrieve all the created modals.\n     *\n     * @returns an array that contains all modal instances.\n     */\n    getModalStack(): ModalInstance[];\n    /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @returns an array that contains all the opened modals.\n     */\n    getOpenedModals(): ModalInstance[];\n    /**\n     * Retrieve the opened modal with highest z-index.\n     *\n     * @returns the opened modal with highest z-index.\n     */\n    getTopOpenedModal(): NgxSmartModalComponent;\n    /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @returns a higher index from all the existing modal instances.\n     */\n    getHigherIndex(): number;\n    /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @returns the number of modal instances.\n     */\n    getModalStackCount(): number;\n    /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param id The modal identifier.\n     * @returns the removed modal instance.\n     */\n    removeModal(id: string): void;\n}\n"]}